def is_safe(board, row, col):
    """
    Checks if placing a queen at the given position (row, col) is safe on the board.
    
    Args:
    - board: The current state of the chessboard.
    - row: The row index of the position to check.
    - col: The column index of the position to check.
    
    Returns:
    - True if placing a queen at the position is safe, False otherwise.
    """
    n = len(board)
    
    # Check if there's a queen in the same row to the left
    for i in range(col):
        if board[row][i] == 1:
            return False
    
    # Check if there's a queen in the upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check if there's a queen in the lower-left diagonal
    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # No queen found in the same row or diagonals, so it's safe to place a queen
    return True


def solve_n_queens_util(board, col, n):
    """
    Recursive utility function to solve the N-Queens problem.
    
    Args:
    - board: The current state of the chessboard.
    - col: The current column to consider for placing a queen.
    - n: The size of the chessboard.
    
    Returns:
    - True if a solution is found, False otherwise.
    """
    # Base case: All queens are placed
    if col == n:
        return True
    
    # Try placing a queen in each row of the current column
    for i in range(n):
        if is_safe(board, i, col):
            board[i][col] = 1  # Place the queen
            
            # Recur to place queens in the next columns
            if solve_n_queens_util(board, col + 1, n):
                return True
            
            # Backtrack if placing a queen in the current position doesn't lead to a solution
            board[i][col] = 0
            
    # No safe position found in this column
    return False


def print_solution(board):
    """
    Prints the solution of the N-Queens problem.
    
    Args:
    - board: The final state of the chessboard with queens placed.
    """
    for row in board:
        print(row)


def solve_n_queens(n):
    """
    Solves the N-Queens problem and prints the solution.
    
    Args:
    - n: The size of the chessboard (number of queens).
    """
    board = [[0] * n for _ in range(n)]  # Initialize the chessboard
    if solve_n_queens_util(board, 0, n) == False:
        print("Solution does not exist")
        return False
    print_solution(board)
    return True


# Example usage: Solve the 8-Queens problem
solve_n_queens(8)
