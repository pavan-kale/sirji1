def bfs_recursive(visited, graph, queue):
    # Check if the queue is empty, indicating all nodes have been visited
    if not queue:  
        return
    
    # Remove the first node from the queue
    node = queue.pop(0)  
    
    # Print the node (vertex) visited
    print(node, end=" ")  
    
    # Mark the node as visited by adding it to the visited list
    visited.append(node)  
    
    # Explore the neighbors of the current node
    for neighbour in graph[node]:  
        # Check if the neighbour has not been visited and is not already in the queue
        if neighbour not in visited and neighbour not in queue:
            # Add the neighbour to the queue for further exploration
            queue.append(neighbour)
    
    # Recur to explore the next node in the queue
    bfs_recursive(visited, graph, queue)

def bfs(graph, start):
    # Initialize an empty list to keep track of visited nodes
    visited = []  
    
    # Initialize the queue with the starting node
    queue = [start]  
    
    # Call the recursive BFS function to traverse the graph
    bfs_recursive(visited, graph, queue)  

# Define the graph as an adjacency list
graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '4': ['8'],
    '2': [],
    '8': []
}

# Call the BFS function with the starting node
print("The BFS is:")
bfs(graph, '5')
